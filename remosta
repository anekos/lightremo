#!/usr/bin/ruby

#  Copyright (c) 2014 anekos
#  Copyright (c) 2012 Yoichi Imai
#
#  Permission is hereby granted, free of charge, to any person obtaining
#  a copy of this software and associated documentation files (the
#  "Software"), to deal in the Software without restriction, including
#  without limitation the rights to use, copy, modify, merge, publish,
#  distribute, sublicense, and/or sell copies of the Software, and to
#  permit persons to whom the Software is furnished to do so, subject to
#  the following conditions:
#
#  The above copyright notice and this permission notice shall be
#  included in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


require 'serialport'

class RemoSta
  module Code
    BlinkLed = 0x69
    Receive = 0x72
    Send = 0x74
    ChannelAYellow = 0x31

    LedResult1 = 0x4f
    LedResult2 = 0x59

    ReceiveResult = 0x59
    ReceiveDataStart = 0x53
    ReceiveDataEnd = 0x45

    SendResult = 0x59
    ChannelResult = 0x59
    SendDataResult = 0x45
  end

  SignalLength = 240

  def initialize (*args, &block)
    open(*args, &block) if block
  end

  def request(code)
    @sp.write([code].pack("C"))
    @sp.read(1).unpack("C")[0]
  end

  def except (code_name, *value_names)
    @sp.write([Code.const_get(code_name)].pack("C")) if code_name
    retval = @sp.read(1).unpack("C")[0]
    raise "Error(%s): %.2x" % [code_name, retval] unless value_names.map {|it| Code.const_get(it) }.include?(retval)
  end

  def recv
    except(:BlinkLed, :LedResult1, :LedResult2)
    except(:Receive, :ReceiveResult)
    except(nil, :ReceiveDataStart)
    signal = @sp.read(SignalLength)
    except(nil, :ReceiveDataEnd)
    signal.unpack("H*")
  end

  def send(data, hex_string: true)
    data = [data].pack("H*") if hex_string

    raise "Signal length is not valid: #{data.length}." unless data.length == SignalLength

    except(:BlinkLed, :LedResult1, :LedResult2)
    except(:Send, :SendResult)
    except(:ChannelAYellow, :ChannelResult)

    @sp.write(data)

    except(nil, :SendDataResult)
  end

  def open(device_path = '/dev/ttyUSB0', &block)
    @sp = SerialPort.new(device_path, 115200, 8, 1, SerialPort::NONE)
    return unless block
    begin
      block.call(self)
    ensure
      close
    end
  end

  def close
    @sp.close
    @sp = nil
  end
end

if __FILE__ == $0 then
  sub_command, hex_data = *ARGV

  if !sub_command or (sub_command == 'send' and !hex_data)
    STDERR.puts "usage: #$0 recv"
    STDERR.puts "usage: #$0 send <HEX_DATA>"
    exit 1
  end

  case sub_command
  when 'recv'
    STDERR.puts('Receiving.')
    RemoSta.new {|it| puts(it.recv) }
    STDERR.puts('Received.')
  when 'send'
    STDERR.puts('Sending.')
    RemoSta.new {|it| it.send(hex_data) }
    STDERR.puts('Sent.')
  else
    STDERR.puts("No such sub-command: #{sub_command}")
  end
end

